plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id 'com.epages.restdocs-api-spec' version '0.18.4'
	id 'jacoco'
}

group = 'com.ssafy'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
//	SpringBoot
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

//	Development Tools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'

//	DB
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	runtimeOnly 'com.h2database:h2'

//	test Container
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'

//	test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

//	API Docs
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.4'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'

//	Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

//	OAuth 2.0
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

//	Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

//	JWT
	implementation 'com.auth0:java-jwt:4.4.0'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
}

jacoco {
	toolVersion = "0.8.8"
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		html.required.set(true)
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect { fileTree(dir: it, exclude: [
						'**/filter/**',
						'**/exception/**',
						'**/handler/**',
						'**/request/**',
						'**/response/**',
						'**/configuration/**'
				])})
		)
	}
}

tasks.register('openapi3-security') {
	dependsOn 'openapi3'
	doFirst {
		def swaggerUIFile = file("${openapi3.outputDirectory}/${openapi3.outputFileNamePrefix}.${openapi3.format}")

		def securitySchemesContent = "  securitySchemes:\n" +         \
                                             "    APIKey:\n" +         \
                                             "      type: apiKey\n" +         \
                                             "      name: Authorization\n" +         \
                                             "      in: header\n" +        \
                                             "security:\n" +
				"  - APIKey: []  # Apply the security scheme here"

		swaggerUIFile
	}
}

openapi3 {
	servers = [
		{ url = 'https://oracle1.mypjt.xyz' },
		{ url = 'http://localhost:8080' }
	]
	title = 'HELLO TEST'
	description = 'HELLO TEST API 문서입니다.'
	version = '1.0.0'
	outputDirectory = 'build/api-spec'
	outputFileNamePrefix = 'openapi3'
	format = 'yml'
}